#!/usr/bin/env python3
'''Plot conditional probability density function of emergent constraints (EC).

Usage: plot_pdf INPUT... OUTPUT [OPTIONS]

Arguments:

  INPUT   Input file - the output of model (NetCDF).
  OUTPUT  Output plot (PDF).

Options:

  xlim: { MIN MAX }  x-axis limits.
  ylim: { MIN MAX }  y-axis limits.

Examples:

  Plot probability density functions of all ECs in merged.

  bin/plot_pdf data/multivar/merged.nc data/merged/*.nc plot/pdf/merged.pdf
'''

import sys
import os
import numpy as np
from scipy.stats import gaussian_kde
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.lines import Line2D
import pst
import ds_format as ds

COLORS = ['#000000', '#f70000', '#00ca12', '#f5de00', '#0096fd', '#b66b00', '#ff00ef', '#ff7b0b', '#9800f1', '#a3a3a3', '#b10000', '#1b8000', '#bb9f00', '#1700a6', '#6d3600', '#a6009f', '#b24700', '#630099', '#4e4e4e']
MARKERS = ['o', 's', '*', '^', '<', '>', 'v', 'x', '+', 'D', 'p', 'h', 'd', 'X', 'P', 'H', '$\\alpha$', '$\\beta$', '$\\gamma$']

mpl.rc('font', family='Open Sans', size=8)
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=5.4)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) < 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = args[1:-1]
	output = args[-1]

	xlim = opts.get('xlim', [1, 9])
	ylim = opts.get('ylim', [0, 1])

	plt.figure(figsize=(6, 3))

	n = len(input_)
	labels = []
	suffixes = []
	colors = []
	markers = []

	for i, filename in enumerate(input_):
		d = ds.read(filename)
		kde = gaussian_kde(d['ypc'].flatten())
		ymin = np.amin(d['ypc'])
		ymax = np.amax(d['ypc'])
		y = np.linspace(ymin, ymax, 100)
		col = COLORS[i]
		marker = MARKERS[i]
		plt.plot(y, kde(y),
			color=col,
			zorder=(20 if i == 0 else None),
		)
		mean = np.mean(d['ypc'])
		sd = np.std(d['ypc'])
		suffix = '; %.1f Â± %.1f K' % (mean, 2*sd)
		low = np.percentile(d['ypc'], 16)
		high = np.percentile(d['ypc'], 84)
		plt.plot([mean, mean], [ylim[0], kde(mean)[0]],
			color=col,
			lw=0.7,
			zorder=(10 if i == 0 else None),
		)
		plt.scatter(mean, kde(mean)[0],
			marker=marker,
			color=col,
			zorder=(20 if i == 0 else 10),
			s=30
		)
		#plt.plot([low, low], [ylim[0], kde(low)[0]], color=col, lw=0.7, linestyle='dashed')
		#plt.plot([high, high], [ylim[0], kde(high)[0]], color=col, lw=0.7, linestyle='dashed')

		labels += [d['title'][0]] if len(d['title']) == 1 else ['Multivariate']
		suffixes += [suffix]
		colors += [col]
		markers += [marker]

	plt.title('Conditional posterior probability density function')
	plt.xlabel('ECS (K)')
	plt.ylabel('Probability')

	plt.xlim(xlim)
	plt.ylim(ylim)

	if 'labels' in opts:
		labels = opts['labels']

	plt.legend(
		handles=[
			Line2D([0], [0],
				marker=marker,
				color=col,
				label=(label + suffix),
				markersize=4
			)
			for label, suffix, col, marker
			in zip(labels, suffixes, colors, markers)
		],
	)
	plt.savefig(output, bbox_inches='tight')
